{"version":3,"sources":["loader.gif","App.js","reportWebVitals.js","index.js"],"names":["App","useState","imageData","setImageData","likedImagesList","setLikedImagesList","useEffect","fetch","then","response","json","catch","error","console","log","checkData","storedLikedImages","localStorage","getItem","JSON","parse","window","addEventListener","removeEventListener","handleLike","date","likedImages","includes","filter","value","length","setItem","stringify","className","breakpointCols","columnClassName","map","image","url","slice","src","alt","title","explanation","onClick","icon","solidHeart","size","color","outlineHeart","loader","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0OAAe,MAA0B,mC,8BCmG1BA,MA3Ff,WAAgB,IAAD,EACqBC,mBAAS,IAD9B,mBACNC,EADM,KACKC,EADL,OAEiCF,mBAAS,IAF1C,mBAENG,EAFM,KAEWC,EAFX,KAKbC,qBAAU,WACRC,MAAM,kIACDC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAE,GAAI,OAAIP,EAAaO,MAC1BC,OAAM,SAAAC,GAAK,OAAIC,QAAQC,IAAIF,QAC/B,IAGHN,qBAAU,WACN,IAAMS,EAAY,WACd,IAAMC,EAAoBC,aAAaC,QAAQ,gBAC5CF,GAAmBX,EAAmBc,KAAKC,MAAMJ,KAMxD,OAJAD,IAEAM,OAAOC,iBAAiB,UAAWP,GAE5B,WACHM,OAAOE,oBAAoB,UAAWR,MAE3C,IAGH,IAAMS,EAAa,SAACC,GAChB,IAAIC,EAAcT,aAAaC,QAAQ,gBACpB,OAAhBQ,IAAsBA,EAAc,IACpCA,EAAYC,SAASF,GAEpBC,GADAA,EAAcP,KAAKC,MAAMM,IACCE,QAAO,SAAAC,GAAK,OAAIA,IAAUJ,MAEjDC,EAAYI,SAAQJ,EAAcP,KAAKC,MAAMM,IAChDA,EAAW,sBAAOA,GAAP,CAAoBD,KAEnCpB,EAAmBqB,GACnBT,aAAac,QAAQ,eAAgBZ,KAAKa,UAAUN,KA4CxD,OACE,sBAAKO,UAAU,MAAf,UACE,qBAAKA,UAAU,SAAf,0BApCI/B,EAAU4B,OACN,cAAC,IAAD,CACII,eAAgB,EAChBD,UAAU,aACVE,gBAAgB,cAHpB,gBAIKjC,QAJL,IAIKA,OAJL,EAIKA,EAAWkC,KAAI,SAAAC,GAAK,MACO,QAAxBA,EAAMC,IAAIC,OAAO,IACb,sBAAKN,UAAU,OAAf,UACI,qBAAKA,UAAU,YAAYO,IAAKH,EAAMC,IAAKG,IAAKJ,EAAMK,QACtD,sBAAKT,UAAU,WAAf,UACI,qBAAKA,UAAU,YAAf,SAA4BI,EAAMK,QAClC,qBAAKT,UAAU,WAAf,SAA2BI,EAAMM,cACjC,sBAAKV,UAAU,YAAf,WAlBVR,EAmB4BY,EAAMZ,MAlBtD,OAAOrB,QAAP,IAAOA,OAAP,EAAOA,EAAiBuB,SAASF,IAmBK,qBAAKQ,UAAU,mBAAmBW,QAAS,kBAAMpB,EAAWa,EAAMZ,OAAlE,SACI,cAAC,IAAD,CAAiBoB,KAAMC,IAAYC,KAAK,KAAKC,MAAM,cAGvD,qBAAKf,UAAU,mBAAmBW,QAAS,kBAAMpB,EAAWa,EAAMZ,OAAlE,SACI,cAAC,IAAD,CAAiBoB,KAAMI,IAAcF,KAAK,KAAKC,MAAM,eAG7D,qBAAKf,UAAU,WAAf,SAA2BI,EAAMZ,gBA5BhD,IAACA,OAmCV,qBAAKQ,UAAU,SAASO,IAAKU,EAAQT,IAAI,mBC1ExCU,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqB7C,MAAK,YAAkD,IAA/C8C,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.6a90e50f.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/loader.f6b174b8.gif\";","import './App.css';\nimport React, { useEffect, useState } from \"react\";\nimport Masonry from 'react-masonry-css';\nimport loader from './loader.gif';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faHeart as solidHeart } from '@fortawesome/free-solid-svg-icons'\nimport { faHeart as outlineHeart } from '@fortawesome/free-regular-svg-icons'\n\nfunction App() {\n  const [imageData, setImageData] = useState([]);\n  const [likedImagesList, setLikedImagesList] = useState([]);\n\n  //fetching the data from NASA api and populating imageData state\n  useEffect(() => {\n    fetch('https://api.nasa.gov/planetary/apod?api_key=kJizNaBpK4kVUlb6fq7MqQuPNT4KR8G21rMp56r9&start_date=2018-01-05&end_date=2018-05-05')\n        .then(response => response.json())\n        .then(json => setImageData(json))\n        .catch(error => console.log(error));\n  }, []);\n\n  //set likedImagesList state once when component mounts, then whenever storage is changed\n  useEffect(() => {\n      const checkData = () => {\n          const storedLikedImages = localStorage.getItem('spacestagram');\n          if(storedLikedImages) setLikedImagesList(JSON.parse(storedLikedImages));\n      };\n      checkData();\n\n      window.addEventListener('storage', checkData);\n\n      return () => {\n          window.removeEventListener(\"storage\", checkData);\n      };\n  }, []);\n\n  //update the storage and likedImagesList state when a user likes/unlikes an image\n  const handleLike = (date) => {\n      let likedImages = localStorage.getItem('spacestagram');\n      if(likedImages === null) likedImages = [];\n      if(likedImages.includes(date)) {\n          likedImages = JSON.parse(likedImages);\n          likedImages = likedImages.filter(value => value !== date);\n      } else {\n          if(likedImages.length) likedImages = JSON.parse(likedImages);\n          likedImages = [...likedImages, date];\n      }\n      setLikedImagesList(likedImages);\n      localStorage.setItem('spacestagram', JSON.stringify(likedImages));\n  };\n\n  //check if an image is liked\n  const isImageLiked = (date) => {\n    return likedImagesList?.includes(date);\n  };\n\n  const cards = () => {\n      return (\n          imageData.length ? (\n              <Masonry\n                  breakpointCols={3}\n                  className=\"cardsGroup\"\n                  columnClassName=\"cardsColumn\">\n                  {imageData?.map(image =>\n                      image.url.slice(-3) === 'jpg' &&\n                          <div className=\"card\">\n                              <img className=\"cardImage\" src={image.url} alt={image.title}/>\n                              <div className=\"cardInfo\">\n                                  <div className=\"cardTitle\">{image.title}</div>\n                                  <div className=\"cardText\">{image.explanation}</div>\n                                  <div className=\"tagsGroup\">\n                                      {isImageLiked(image.date) ? (\n                                          <div className=\"cardOutlineHeart\" onClick={() => handleLike(image.date)}>\n                                              <FontAwesomeIcon icon={solidHeart} size=\"lg\" color=\"#FC636B\" />\n                                          </div>\n                                      ) : (\n                                          <div className=\"cardOutlineHeart\" onClick={() => handleLike(image.date)}>\n                                              <FontAwesomeIcon icon={outlineHeart} size=\"lg\" color=\"#A9A9A9\" />\n                                          </div>\n                                      )}\n                                      <div className=\"cardDate\">{image.date}</div>\n                                  </div>\n                              </div>\n                          </div>\n                  )}\n              </Masonry>\n          ) : (\n              <img className=\"loader\" src={loader} alt=\"loading...\"/>\n          )\n      )\n  };\n\n  return (\n    <div className=\"App\">\n      <div className=\"header\">SPACESTAGRAM</div>\n      {cards()}\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}